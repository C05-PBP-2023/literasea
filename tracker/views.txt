from django.shortcuts import render, get_object_or_404, redirect
from .forms import addTrackerForm
from .models import BookTracker
from authentication.models import UserProfile
from django.http import HttpResponseRedirect, JsonResponse
from django.urls import reverse
from django.utils import timezone
from products.models import Katalog
from django.contrib.auth.decorators import login_required
from django.views.decorators.csrf import csrf_exempt
import json

@login_required(login_url="authentication:login")
def show_tracked(request):
    tracked = request.user.userprofile.tracked_books.all().order_by("-tanggal")

    context = {
        "tracked": tracked,
    }

    return render(request, "show_tracked.html", context)

@login_required(login_url="authentication:login")
@csrf_exempt
def add_tracked(request):
    if request.method == "POST":
        form = addTrackerForm(request.POST)
        judul = request.POST.get("judul")
        book = Katalog.objects.get(BookTitle=judul)
        halaman_terakhir = request.POST.get("halaman_terakhir")
        current_time = timezone.now()

        existing_tracker = BookTracker.objects.filter(
            judul=judul, user=request.user
        ).first()

        if existing_tracker:
            existing_tracker.halaman_terakhir = halaman_terakhir
            existing_tracker.tanggal = current_time
            existing_tracker.save()
        else:
            new_tracker = form.save(commit=False)
            new_tracker.user = request.user
            new_tracker.tanggal = current_time
            new_tracker.book = book
            new_tracker.save()

            user_profile, created = UserProfile.objects.get_or_create(user=request.user)
            user_profile.tracked_books.add(new_tracker)

        return HttpResponseRedirect(reverse("tracker:show_tracked"))
    else:
        form = addTrackerForm()

    owned = request.user.userprofile.owned_books.all()
    context = {"form": form, "owned": owned}

    return render(request, "add_tracked.html", context)

@login_required(login_url="authentication:login")
@csrf_exempt
def add_tracked_ajax(request):
    if request.method == "POST":
        form = addTrackerForm(request.POST)
        judul = request.POST.get("judul")
        book = Katalog.objects.get(BookTitle=judul)
        halaman_terakhir = request.POST.get("halaman_terakhir")
        current_time = timezone.now()

        existing_tracker = BookTracker.objects.filter(
            judul=judul, user=request.user
        ).first()

        if existing_tracker:
            existing_tracker.halaman_terakhir = halaman_terakhir
            existing_tracker.tanggal = current_time
            existing_tracker.save()
        else:
            new_tracker = form.save(commit=False)
            new_tracker.user = request.user
            new_tracker.tanggal = current_time
            new_tracker.book = book
            new_tracker.save()

            user_profile, created = UserProfile.objects.get_or_create(user=request.user)
            user_profile.tracked_books.add(new_tracker)

        return JsonResponse(
            {"status": "success", "message": "Tracker updated successfully"}
        )
    else:
        return JsonResponse({"status": "error", "message": "Invalid request method"})







from django.shortcuts import render, get_object_or_404, redirect
from .forms import addTrackerForm
from .models import BookTracker
from authentication.models import UserProfile
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.utils import timezone
from products.models import Katalog
from django.contrib.auth.decorators import login_required
from django.views.decorators.csrf import csrf_exempt


@login_required(login_url="authentication:login")
def show_tracked(request):
    tracked = request.user.userprofile.tracked_books.all().order_by("-tanggal")

    context = {
        "tracked": tracked,
    }

    return render(request, "show_tracked.html", context)


"""
Tujuan: Menampilkan halaman yang berisi daftar buku yang telah dilacak oleh pengguna.
-
Memperoleh daftar buku yang dilacak oleh pengguna yang sedang login.
Mengurutkan daftar buku berdasarkan tanggal pencatatan secara descending.
Mengirimkan daftar buku sebagai konteks ke halaman HTML "show_tracked.html".

"""


@login_required(login_url="authentication:login")
@csrf_exempt
def add_tracked(request):
    if request.method == "POST":
        form = addTrackerForm(request.POST)
        judul = request.POST.get("judul")
        book = Katalog.objects.get(BookTitle=judul)
        halaman_terakhir = request.POST.get("halaman_terakhir")
        current_time = timezone.now()

        # Cek apakah sudah ada tracker dengan judul yang sama
        existing_tracker = BookTracker.objects.filter(
            judul=judul, user=request.user
        ).first()

        if existing_tracker:
            # Jika sudah ada, update halaman_terakhir dan tanggal
            existing_tracker.halaman_terakhir = halaman_terakhir
            existing_tracker.tanggal = current_time
            existing_tracker.save()
        else:
            # Jika belum ada, buat objek baru
            new_tracker = form.save(commit=False)
            new_tracker.user = request.user
            new_tracker.tanggal = current_time
            new_tracker.book = book
            new_tracker.save()

            user_profile, created = UserProfile.objects.get_or_create(user=request.user)
            user_profile.tracked_books.add(new_tracker)

        # Redirect to show_tracked page after form submission
        return HttpResponseRedirect(reverse("tracker:show_tracked"))
    else:
        form = addTrackerForm()

    owned = request.user.userprofile.owned_books.all()
    context = {"form": form, "owned": owned}

    return render(request, "add_tracked.html", context)


"""
Tujuan: Menangani penambahan buku ke dalam tracker melalui formulir atau request POST.
-
Jika request adalah POST, formulir diisi dengan data yang dikirimkan.
Mendapatkan data seperti judul buku, halaman terakhir, dan waktu saat ini.
Mengecek apakah sudah ada tracker dengan judul yang sama.
Jika sudah ada, mengupdate halaman terakhir dan tanggal.
Jika belum ada, membuat objek tracker baru dan menyimpannya.
Redirect ke halaman show_tracked setelah pengisian formulir.
Jika request bukan POST, menampilkan formulir kosong dengan daftar buku yang dimiliki pengguna.
"""


@login_required(login_url="authentication:login")
@csrf_exempt
def add_tracked_ajax(request):
    if request.method == "POST":
        form = addTrackerForm(request.POST)
        judul = request.POST.get("judul")
        book = Katalog.objects.get(BookTitle=judul)
        halaman_terakhir = request.POST.get("halaman_terakhir")
        current_time = timezone.now()

        existing_tracker = BookTracker.objects.filter(
            judul=judul, user=request.user
        ).first()

        if existing_tracker:
            existing_tracker.halaman_terakhir = halaman_terakhir
            existing_tracker.tanggal = current_time
            existing_tracker.save()
        else:
            new_tracker = form.save(commit=False)
            new_tracker.user = request.user
            new_tracker.tanggal = current_time
            new_tracker.book = book
            new_tracker.save()

            user_profile, created = UserProfile.objects.get_or_create(user=request.user)
            user_profile.tracked_books.add(new_tracker)

        return JsonResponse(
            {"status": "success", "message": "Tracker updated successfully"}
        )
    else:
        return JsonResponse({"status": "error", "message": "Invalid request method"})


"""
Tujuan: Menangani penambahan buku ke dalam tracker melalui formulir atau request POST melalui AJAX.
-
Jika request adalah POST, formulir diisi dengan data yang dikirimkan melalui AJAX.
Mendapatkan data seperti judul buku, halaman terakhir, dan waktu saat ini.
Mengecek apakah sudah ada tracker dengan judul yang sama.
Jika sudah ada, mengupdate halaman terakhir dan tanggal.
Jika belum ada, membuat objek tracker baru dan menyimpannya.
Mengirimkan respons JSON jika berhasil dengan status "success".
Jika request bukan POST, mengirimkan respons JSON dengan status "error".
"""
